###########################################################################################################
## DO Community Playbooks
## Playbook: Initial Server Setup
## Based on: https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04
## Dedicated Guide: https://www.digitalocean.com/community/tutorials/automating-initial-server-setup-with-ansible
####################################################################################################################
#
---
- hosts: debian
  remote_user: root
  gather_facts: false
  vars:
    create_user: ansible
    copy_local_key: files/id_ecdsa.pub
    sys_packages: [ 'sudo', 'vim', 'git', 'ufw'] 
    enabled_repos: 
      - deb http://ftp.us.debian.org/debian buster main contrib non-free
      - deb http://security.debian.org/debian-security buster/updates main contrib
      - deb-src http://ftp.us.debian.org/debian buster main contrib non-free
      - deb-src http://security.debian.org/debian-security buster/updates main contrib

  tasks:

    - name: Disable cdrom repo
      replace:
        path: /etc/apt/sources.list
        regexp: '(.*cdrom.*)'
        replace: '#\1'

    - name: Enable repos
      apt_repository:
        repo: "{{ item }}" 
        state: present
      loop: "{{ enabled_repos }}"

    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
         user: "{{ create_user }}"
         state: present
         key: "{{ copy_local_key }}"

    - name: Disable password authentication for root
      lineinfile:
         path: /etc/ssh/sshd_config
         state: present
         regexp: '^#?PermitRootLogin'
         line: 'PermitRootLogin prohibit-password'

    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming
